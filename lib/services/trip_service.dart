import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/trip/trip_model.dart';
import '../core/constants/app_constants.dart';

/// Service for managing trip data in Firestore
class TripService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

                /// Save a trip to Firestore
              static Future<String> saveTrip({
                required Trip trip,
                required String userId,
              }) async {
                try {
                  // Validate trip data
                  if (!trip.isValid()) {
                    final errors = trip.getValidationErrors();
                    throw Exception('Invalid trip data: ${errors.join(', ')}');
                  }

                  // Create trip document reference with auto-generated ID
                  final tripRef = _firestore
                      .collection('users')
                      .doc(userId)
                      .collection('trips')
                      .doc(); // Auto-generate ID

                  // Update trip with the generated ID
                  final tripWithId = trip.copyWith(
                    id: tripRef.id,
                    tripData: trip.tripData.copyWith(id: tripRef.id),
                  );

                  // Save trip data
                  await tripRef.set(tripWithId.toJson());

                  return tripRef.id;
                } catch (e) {
                  throw Exception('Failed to save trip: $e');
                }
              }

                /// Create a trip from flight option and contacts
              static Trip createTripFromFlightOption({
                required dynamic flightOption, // FlightOption from search results
                required List<dynamic> contacts, // ContactModel from add contacts screen
                required bool userNotifications,
                required String departureCity,
                required String arrivalCity,
                String? source = 'manual',
              }) {
                final now = DateTime.now();
                // ID will be generated by Firestore when saving
                const tripId = '';

                // Convert FlightOption to TripFlight
                final tripFlights = flightOption.flights.map<TripFlight>((flight) {
                  // Extract airport information
                  final departureAirport = flight.departureAirport;
                  final arrivalAirport = flight.arrivalAirport;

                  // Parse departure and arrival times from the airport time fields
                  DateTime departureTime;
                  DateTime arrivalTime;

                  try {
                    // Parse time string like "2025-12-10 04:10" to DateTime
                    departureTime = DateTime.parse(departureAirport.time);
                  } catch (e) {
                    departureTime = DateTime.now(); // Fallback
                  }

                  try {
                    // Parse time string like "2025-12-10 06:35" to DateTime
                    arrivalTime = DateTime.parse(arrivalAirport.time);
                  } catch (e) {
                    arrivalTime = DateTime.now(); // Fallback
                  }

                  return TripFlight(
                    flightNumber: flight.flightNumber,
                    airline: flight.airline,
                    airlineLogo: flight.airlineLogo,
                    departureAirport: departureAirport.id, // Use airport ID (e.g., "DEL", "LHR")
                    arrivalAirport: arrivalAirport.id, // Use airport ID (e.g., "DEL", "LHR")
                    departureTime: departureTime,
                    arrivalTime: arrivalTime,
                    duration: flight.duration,
                    airplane: flight.airplane,
                    travelClass: flight.travelClass,
                  );
                }).toList();

                // Create trip data
                final tripData = TripData(
                  id: tripId, // Will be updated with Firestore-generated ID
                  departureAirport: tripFlights.first.departureAirport,
                  arrivalAirport: tripFlights.last.arrivalAirport,
                  departureTime: tripFlights.first.departureTime,
                  totalDuration: flightOption.totalDuration,
                  flights: tripFlights,
                );

                // Convert contacts to TripContact
                final tripContacts = contacts.map<TripContact>((contact) {
                  return TripContact(
                    name: contact.name,
                    phoneNumber: contact.phoneNumber ?? '',
                    relationship: 'family', // Default as discussed
                  );
                }).toList();

                // Create metadata
                final metadata = TripMetadata(
                  createdAt: now,
                  updatedAt: now,
                  source: source ?? 'manual',
                );

                // Create and return trip
                return Trip(
                  id: tripId,
                  tripData: tripData,
                  contacts: tripContacts,
                  status: 'scheduled', // Initial status
                  userNotifications: userNotifications,
                  metadata: metadata,
                );
              }

  /// Get all trips for a user
  static Future<List<Trip>> getUserTrips(String userId) async {
    try {
      final querySnapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection('trips')
          .orderBy('metadata.createdAt', descending: true)
          .get();

      return querySnapshot.docs
          .map((doc) => Trip.fromJson(doc.data()))
          .toList();
    } catch (e) {
      throw Exception('Failed to get user trips: $e');
    }
  }

  /// Get a specific trip by ID
  static Future<Trip?> getTrip(String userId, String tripId) async {
    try {
      final docSnapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection('trips')
          .doc(tripId)
          .get();

      if (docSnapshot.exists) {
        return Trip.fromJson(docSnapshot.data()!);
      }
      return null;
    } catch (e) {
      throw Exception('Failed to get trip: $e');
    }
  }

  /// Update trip status
  static Future<void> updateTripStatus({
    required String userId,
    required String tripId,
    required String status,
  }) async {
    try {
      await _firestore
          .collection('users')
          .doc(userId)
          .collection('trips')
          .doc(tripId)
          .update({
        'status': status,
        'metadata.updatedAt': DateTime.now().toIso8601String(),
      });
    } catch (e) {
      throw Exception('Failed to update trip status: $e');
    }
  }

  /// Delete a trip
  static Future<void> deleteTrip({
    required String userId,
    required String tripId,
  }) async {
    try {
      await _firestore
          .collection('users')
          .doc(userId)
          .collection('trips')
          .doc(tripId)
          .delete();
    } catch (e) {
      throw Exception('Failed to delete trip: $e');
    }
  }

  /// Get current user ID
  static String? getCurrentUserId() {
    return _auth.currentUser?.uid;
  }





  /// Check if user has any trips
  static Future<bool> hasUserTrips(String userId) async {
    try {
      final querySnapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection('trips')
          .limit(1)
          .get();

      return querySnapshot.docs.isNotEmpty;
    } catch (e) {
      return false;
    }
  }

  /// Get trip count for a user
  static Future<int> getUserTripCount(String userId) async {
    try {
      final querySnapshot = await _firestore
          .collection('users')
          .doc(userId)
          .collection('trips')
          .get();

      return querySnapshot.docs.length;
    } catch (e) {
      return 0;
    }
  }
} 